new <- rbind(new, selection)
}
}
}
new <- na.omit(new)
View(new)
View(erp)
gamma1 <- read_csv("Data/Perception_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma1$Condition <- "Perception"
gamma2 <- read_csv("Data/EDA_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma2$Condition <- "EDA"
gamma3 <- read_csv("Data/Motor_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma3$Condition <- "Motor"
gamma4 <- read_csv("Data/Control_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma4$Condition <- "Control"
gamma <- do.call("rbind", list(gamma1, gamma2, gamma3, gamma4))
gamma <- gamma[!duplicated(gamma), ]  # remove duplicate rows
gamma <- subset(gamma, gamma$ID!=18)  # exclude subject 18 (DNF motor)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(gamma$ID)) {  # for each subject
for (stimulus in unique(gamma$Stimulus)) {  # for each stimulus level
for (condition in unique(gamma$Condition)) {  # for each condition
selection <- subset(gamma, (gamma$ID==subject & gamma$Stimulus==stimulus & gamma$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
new <- na.omit(new)  # remove extra NA row at the top
View(new)
View(gamma)
library(ggpubr)
library(emmeans)
library(readr)
library(afex)
library(car)
library(multcomp)
R1 <- read_csv("Data/Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R1$Condition <- "Perception"
R2 <- read_csv("Data/Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2$Condition <- "Control"
ratings <- rbind(R1, R2)
ratings <- subset(ratings, ratings$Subject!=18)  # exclude subject 18 (DNF motor)
ratings <- ratings[!(ratings$Pain %in% boxplot(ratings$Pain)$out),]  # remove rows with outliers
View(ratings)
aov(Pain ~ Sex, data=ratings)
summary(aov(Pain ~ Sex, data=ratings))
summary(aov(Pain ~ Sex * Stimulus, data=ratings))
View(ratings)
summary(aov(Pain ~ Sex * Stim, data=ratings))
library(rstatix)
anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex)
get_anova_table(anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex))
library(afex)
pain.model <- aov_ez(id = "Subject",
dv = "Pain",
data = ratings,
between = "Sex",
within = "Stim",
fun_aggregate = mean)
knitr::kable(nice(pain.model))
pain.model <- aov_ez(id = "Subject",
dv = "Pain",
data = ratings,
between = "Sex",
fun_aggregate = mean)
knitr::kable(nice(pain.model))
View(ratings)
get_anova_table(anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex))
R <- aggregate(Pain ~ Subject + Sex, data = ratings, mean)
View(R)
get_anova_table(anova_test(data = R, dv = Pain, wid = Subject, within = Sex))
summary(aov(Pain ~ Sex + Error(Subject/Sex), data=ratings))
ggboxplot(ratings, Sex, Pain)
ggboxplot(data = ratings, x = Sex, y = Pain)
View(ratings)
ggboxplot
?ggboxplot
ggboxplot(data = ratings, x = "Sex", y = "Pain")
library(ggpubr)
library(car)
library(multcomp)
library(tidyverse)
library(rstatix)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
library(afex)
gamma1 <- read_csv("Data/Perception_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma1$Condition <- "Perception"
gamma2 <- read_csv("Data/EDA_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma2$Condition <- "EDA"
gamma3 <- read_csv("Data/Motor_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma3$Condition <- "Motor"
gamma4 <- read_csv("Data/Control_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma4$Condition <- "Control"
gamma <- do.call("rbind", list(gamma1, gamma2, gamma3, gamma4))
gamma <- gamma[!duplicated(gamma), ]  # remove duplicate rows
gamma <- subset(gamma, gamma$ID!=18)  # exclude subject 18 (DNF motor)
View(gamma)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value")
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + facet_grid(. ~ Condition)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + facet_grid(. ~ Condition) + geom_hline(yintercept=mean(subset(gamma, gamma$Component=="Baseline_Amp")$Value))
mean(subset(gamma, gamma$Component=="Baseline_Amp" & gamma$Sex=="female")$Value)
mean(subset(gamma, gamma$Component=="Baseline_Amp" & gamma$Sex=="male")$Value)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + facet_grid(. ~ Condition) + geom_hline(yintercept=-110.9169,linetype="dashed") + geom_hline(yintercept=-112.3391)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + geom_hline(yintercept=-110.9169,linetype="dashed") + geom_hline(yintercept=-112.3391) + facet_grid(. ~ Condition)
library(readr)
library(ggplot2)
library(png)
maleGammaTS_1 <- read_csv("../Figures/maleGammaTS_1.csv",
col_types = cols(...1 = col_skip()))
View(maleGammaTS_1)
plot(maleGammaTS_1)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + geom_hline(yintercept=-110.9169,linetype="dashed") + geom_hline(yintercept=-112.3391) + facet_grid(. ~ Condition)
library(ggplot2)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + geom_hline(yintercept=-110.9169,linetype="dashed") + geom_hline(yintercept=-112.3391) + facet_grid(. ~ Condition)
library(ggpubr)
ggboxplot(data = subset(gamma, gamma$Component=="Gamma_Amp"), x="Sex", y="Value") + geom_hline(yintercept=-110.9169,linetype="dashed") + geom_hline(yintercept=-112.3391) + facet_grid(. ~ Condition)
library(readr)
library(ggplot2)
library(png)
maleGammaTS_1 <- read_csv("../Figures/maleGammaTS_1.csv",
col_types = cols(...1 = col_skip()))
maleGammaTS_2 <- read_csv("../Figures/maleGammaTS_2.csv",
col_types = cols(...1 = col_skip()))
maleGammaTS_3 <- read_csv("../Figures/maleGammaTS_3.csv",
col_types = cols(...1 = col_skip()))
maleGammaTS_1$Time <- maleGammaTS_1$Time + 0.125
maleGammaTS_2$Time <- maleGammaTS_2$Time + 0.125
maleGammaTS_3$Time <- maleGammaTS_3$Time + 0.125
Mlegend <- readPNG('../Figures/maleLegend.png')
ggplot() +
geom_line(data = maleGammaTS_1, aes(x = Time, y = Gamma), color = "#2DE1FC", linewidth = 1) +
geom_line(data = maleGammaTS_2, aes(x = Time, y = Gamma), color = "#2274A5", linewidth = 1) +
geom_line(data = maleGammaTS_3, aes(x = Time, y = Gamma), color = "#090C9B", linewidth = 1) +
annotation_raster(Mlegend, ymin = 0.85, ymax= 1.1, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("") +  # hide the y label, since it's already next to another chart
ylim(-0.15, 1.1) +
ggtitle("Male")
ggplot() +
geom_line(data = maleGammaTS_1, aes(x = Time, y = Gamma), color = "#2DE1FC", linewidth = 1) +
geom_line(data = maleGammaTS_2, aes(x = Time, y = Gamma), color = "#2274A5", linewidth = 1) +
geom_line(data = maleGammaTS_3, aes(x = Time, y = Gamma), color = "#090C9B", linewidth = 1) +
annotation_raster(Mlegend, ymin = 0.85, ymax= 1.1, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("") +  # hide the y label, since it's already next to another chart
ylim(-50, 50) +
ggtitle("Male")
ggplot() +
geom_line(data = maleGammaTS_1, aes(x = Time, y = Gamma), color = "#2DE1FC", linewidth = 1) +
geom_line(data = maleGammaTS_2, aes(x = Time, y = Gamma), color = "#2274A5", linewidth = 1) +
geom_line(data = maleGammaTS_3, aes(x = Time, y = Gamma), color = "#090C9B", linewidth = 1) +
annotation_raster(Mlegend, ymin = 0.85, ymax= 1.1, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("") +  # hide the y label, since it's already next to another chart
ylim(-5, 50) +
ggtitle("Male")
maleGammaTS_1 <- read_csv("../Figures/maleGammaTS_1.csv",
col_types = cols(...1 = col_skip()))
maleGammaTS_2 <- read_csv("../Figures/maleGammaTS_2.csv",
col_types = cols(...1 = col_skip()))
maleGammaTS_3 <- read_csv("../Figures/maleGammaTS_3.csv",
col_types = cols(...1 = col_skip()))
ggplot() +
geom_line(data = maleGammaTS_1, aes(x = Time, y = Gamma), color = "#2DE1FC", linewidth = 1) +
geom_line(data = maleGammaTS_2, aes(x = Time, y = Gamma), color = "#2274A5", linewidth = 1) +
geom_line(data = maleGammaTS_3, aes(x = Time, y = Gamma), color = "#090C9B", linewidth = 1) +
annotation_raster(Mlegend, ymin = 0.85, ymax= 1.1, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("") +  # hide the y label, since it's already next to another chart
ylim(-5, 50) +
ggtitle("Male")
maleGammaTS_1$Time <- maleGammaTS_1$Time + 0.125
maleGammaTS_2$Time <- maleGammaTS_2$Time + 0.125
maleGammaTS_3$Time <- maleGammaTS_3$Time + 0.125
ggplot() +
geom_line(data = maleGammaTS_1, aes(x = Time, y = Gamma), color = "#2DE1FC", linewidth = 1) +
geom_line(data = maleGammaTS_2, aes(x = Time, y = Gamma), color = "#2274A5", linewidth = 1) +
geom_line(data = maleGammaTS_3, aes(x = Time, y = Gamma), color = "#090C9B", linewidth = 1) +
annotation_raster(Mlegend, ymin = 0.85, ymax= 1.1, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("") +  # hide the y label, since it's already next to another chart
ylim(-5, 50) +
ggtitle("Male")
library(readr)
library(ggplot2)
library(png)
ggplot() +
geom_line(data = femaleGammaTS_1, aes(x = Time, y = Gamma), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleGammaTS_2, aes(x = Time, y = Gamma), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleGammaTS_3, aes(x = Time, y = Gamma), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 30, ymax= 35, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Gamma Power (% change from Baseline)") +
ylim(-4, 40) +
ggtitle("Female")
```{r setup, include=FALSE}
femaleGammaTS_1 <- read_csv("../Figures/femaleGammaTS_1.csv",
col_types = cols(...1 = col_skip()))
femaleGammaTS_2 <- read_csv("../Figures/femaleGammaTS_2.csv",
col_types = cols(...1 = col_skip()))
femaleGammaTS_3 <- read_csv("../Figures/femaleGammaTS_3.csv",
col_types = cols(...1 = col_skip()))
femaleGammaTS_1$Time <- femaleGammaTS_1$Time + 0.125
femaleGammaTS_2$Time <- femaleGammaTS_2$Time + 0.125
femaleGammaTS_3$Time <- femaleGammaTS_3$Time + 0.125
Flegend <- readPNG('../Figures/femaleLegend.png')
ggplot() +
geom_line(data = femaleGammaTS_1, aes(x = Time, y = Gamma), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleGammaTS_2, aes(x = Time, y = Gamma), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleGammaTS_3, aes(x = Time, y = Gamma), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 30, ymax= 35, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Gamma Power (% change from Baseline)") +
ylim(-4, 40) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleGammaTS_1, aes(x = Time, y = Gamma), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleGammaTS_2, aes(x = Time, y = Gamma), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleGammaTS_3, aes(x = Time, y = Gamma), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 30, ymax= 40, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Gamma Power (% change from Baseline)") +
ylim(-4, 40) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleGammaTS_1, aes(x = Time, y = Gamma), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleGammaTS_2, aes(x = Time, y = Gamma), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleGammaTS_3, aes(x = Time, y = Gamma), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 30, ymax= 38, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Gamma Power (% change from Baseline)") +
ylim(-4, 40) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleGammaTS_1, aes(x = Time, y = Gamma), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleGammaTS_2, aes(x = Time, y = Gamma), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleGammaTS_3, aes(x = Time, y = Gamma), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 30, ymax= 39, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Gamma Power (% change from Baseline)") +
ylim(-4, 40) +
ggtitle("Female")
library(readr)
gamma <- read_csv("Baseline Corrected/Perception_freq_FIXED.csv",
col_types = cols(...1 = col_skip()))
View(gamma)
library(ggpubr)
library(car)
library(multcomp)
library(tidyverse)
library(rstatix)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
library(afex)
gamma <- gamma[!duplicated(gamma), ]  # remove duplicate rows
gamma <- subset(gamma, gamma$ID!=18)  # exclude subject 18 (DNF motor)
library(ggpubr)
library(car)
library(multcomp)
library(tidyverse)
library(rstatix)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
library(afex)
difference <- function(df, title, ignore){
baseline <- subset(df, df$Component=="Baseline_Amp" & !(df$ID %in% ignore))
test <- subset(df, df$Component==title & !(df$ID %in% ignore))
# sub-sampling baseline so it equals test in length
baseline <- baseline[sample(nrow(baseline), length(test$Value)), ]
data <- rbind(baseline, test)
# check that the difference is close enough to normal
d <- baseline$Value - test$Value
hist(d)
pairwise_t_test(data, Value ~ Component, paired = TRUE, p.adjust.method = "bonferroni")
}
ggboxplot(subset(gamma, grepl("Amp", gamma$Component, fixed = TRUE)),
x="Component", y="Value",
color = "Component", palette = c("#00AFBB", "#E7B800"),
ylab = "Amplitude", xlab = "Component",
order = c("Baseline_Amp", "Gamma_Amp"))
difference(gamma, "Gamma_Amp", ignore=c())
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(gamma$ID)) {  # for each subject
for (stimulus in unique(gamma$Stimulus)) {  # for each stimulus level
for (condition in unique(gamma$Condition)) {  # for each condition
selection <- subset(gamma, (gamma$ID==subject & gamma$Stimulus==stimulus & gamma$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
new <- na.omit(new)  # remove extra NA row at the top
gamma <- new  # replace ERP with baseline corrected values
library(readr)
gamma <- read_csv("Baseline Corrected/Perception_freq_FIXED.csv",
col_types = cols(...1 = col_skip()))
View(gamma)
gamma$Condition <- "Perception"
View(gamma)
gamma <- gamma[!duplicated(gamma), ]  # remove duplicate rows
gamma <- subset(gamma, gamma$ID!=18)  # exclude subject 18 (DNF motor)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(gamma$ID)) {  # for each subject
for (stimulus in unique(gamma$Stimulus)) {  # for each stimulus level
for (condition in unique(gamma$Condition)) {  # for each condition
selection <- subset(gamma, (gamma$ID==subject & gamma$Stimulus==stimulus & gamma$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
new <- na.omit(new)  # remove extra NA row at the top
gamma <- new  # replace ERP with baseline corrected values
View(new)
model <- function(df, title, post=FALSE, inter=FALSE) {
temp <- subset(df, df$Component==title)
temp <- temp[!(temp$Value %in% boxplot(temp$Value)$out),]  # remove rows with outliers
full.model <- aov_ez(id = "ID",
dv = "Value",
data = temp,
between = "Sex",
within = c("Stimulus", "Condition"),
fun_aggregate = mean)
if (post) {  # if we are running post-hoc...
post.hoc <- emmeans(full.model, ~ Sex)
print(summary(as.glht(pairs(post.hoc)), test=adjusted("bonferroni")))
}
if (inter) {  # if we have an interaction
post.hoc <- emmeans(full.model, ~ Sex|Stimulus)
print(summary(as.glht(pairs(post.hoc)), test=adjusted("bonferroni")))
}
# assumption testing
print("Sample size:")
print(length(temp$Value))
print(table(temp$Sex))
# 1.  Normality
print("NORMALITY: Visually inspect for non-normal data")
R = residuals(full.model)
qqPlot(R)
hist(R)
# 2.  Homogeneity of Variance (Levene's test)
print("HOMOGENEITY OF VARIANCE: For Levene's test, p of < 0.05 is a violation, but if there is little to no group imbalance (ex: between male/female) this is acceptable")
print(leveneTest(Value ~ Sex * Stimulus * Condition, data = temp))
print(table(temp$Sex))
print(table(temp$Stimulus))
print(table(temp$Condition))
# 3. Sphericity
print("Violations of sphericity have been Greenhouse-Geisser corrected")
return(full.model)
}
m <- model(gamma, "Gamma_Amp", post=TRUE)
femaleAlphaTS_1 <- read_csv("../Figures/femaleAlphaTS_1.csv",
col_types = cols(...1 = col_skip()))
femaleAlphaTS_2 <- read_csv("../Figures/femaleAlphaTS_2.csv",
col_types = cols(...1 = col_skip()))
femaleAlphaTS_3 <- read_csv("../Figures/femaleAlphaTS_3.csv",
col_types = cols(...1 = col_skip()))
femaleAlphaTS_1$Time <- femaleAlphaTS_1$Time + 0.125
femaleAlphaTS_2$Time <- femaleAlphaTS_2$Time + 0.125
femaleAlphaTS_3$Time <- femaleAlphaTS_3$Time + 0.125
Flegend <- readPNG('../Figures/femaleLegend.png')
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 2.53, ymax= 3.5, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-10, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 2.53, ymax= 3.5, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-50, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 2.53, ymax= 3.5, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-30, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 90, ymax= 99, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-30, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 80, ymax= 99, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-30, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 80, ymax= 100, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-30, 100) +
ggtitle("Female")
ggplot() +
geom_line(data = femaleAlphaTS_1, aes(x = Time, y = Alpha), color = "#FA7DEB", linewidth = 1) +
geom_line(data = femaleAlphaTS_2, aes(x = Time, y = Alpha), color = "#CE7DA5", linewidth = 1) +
geom_line(data = femaleAlphaTS_3, aes(x = Time, y = Alpha), color = "#563440", linewidth = 1) +
annotation_raster(Flegend, ymin = 75, ymax= 100, xmin = 0.8, xmax = 1) +
geom_vline(xintercept = 0, linetype="dashed") +
geom_hline(yintercept = 0, linetype="solid") +
scale_x_continuous(name = "Time (s)", limits = c(-0.2, 1), breaks = seq(-0.2, 1, 0.1)) +
ylab("Alpha Power (dB, relative to Baseline)") +
ylim(-30, 100) +
ggtitle("Female")
