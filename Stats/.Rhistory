erp.model
erp.model <- aovperm(Value ~ Sex * Stimulus * Condition + +Error(ID/within), data = test)
erp.model <- aovperm(Value ~ Sex * Stimulus * Condition + +Error(ID/ (Stimulus * Condition)), data = test)
erp.model
qqPlot(residuals(erp.model))
qqPlot(erp.model)
qqnorm(erp.model)
summary(erp.model)
erp.model
?aovperm
plot(erp.model)
type(erp.model)
typeof(erp.model)
erp.model$model.matrix
erp.model$distribution
erp.model$table
tukey_hsd(erp.model)
qqPlot(erp.model)
erp.model <- lmer(Value ~ Sex * Stimulus * Condition + (1|ID), data = temp, REML = TRUE)
qqPlot(erp.model)
qqPlot(residuals(erp.model))
erp.model <- aovperm(Value ~ Sex * Stimulus * Condition + +Error(ID/ (Stimulus * Condition)), data = test)
print(erp.model)
summary(erp.model)
erp.model <- glmer(Value ~ Sex * Stimulus * Condition + (1|ID), data = temp, REML = TRUE)
erp.model <- glmer(Value ~ Sex * Stimulus * Condition + (1|ID), data = temp)
erp.model <- glmer(Value ~ Sex * Stimulus * Condition + (1|ID), data = temp, family="poisson")
?gmler
?glmer
erp.model <- glmer(Value ~ Sex * Stimulus * Condition + (1|ID), data = temp, family="Gamma")
install.packages("robustlmm")
?rlmer
library(robustlmm)
?rlmer
plot(test$Value)
boxplot(test$Value)
boxplot(test$Value)$out
test$Value[!test$Value %in% boxplot.stats(test$Value)$out]
newtest <- test
newtest$Value <- test$Value[!test$Value %in% boxplot.stats(test$Value)$out]
test <- test %>% filter_all(all_vars(. <= quantile(., 0.99, na.rm = TRUE)))
?filter_all
boxplot(test$Value)$outs
boxplot(test$Value)$out
subset(test, !(test$Value %in% boxplot(test$Value)$out))
test <- subset(test, !(test$Value %in% boxplot(test$Value)$out))
test
plot(test)
qqnorm(test)
qqnorm(test$Value)
qqline(test$Value)
R1 <- read_csv("Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R1$Condition <- "Perception"
R2 <- read_csv("Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2$Condition <- "Control"
ratings <- rbind(R1, R2)
ratings <- subset(ratings, ratings$Subject!=18)  # exclude subject 18 (DNF motor)
outs <- boxplot(ratings$Pain)$out  # identify outliers
ratings <- subset(ratings, !(ratings$Pain %in% outs))  # remove them
hist(ratings$Pain)
quantNorm <- function (x) {  # function for quantile normalization suggested by Dr. Nam
qnorm(rank(x,ties.method = "average")/(length(x)+1))
}
hist(ratings$Pain)
hist(quantNorm(ratings$Pain))
shapiro.test(ratings$Pain)
qqnorm(ratings$Pain)
qqnorm(quantNorm(ratings$Pain))
qqline
qqline(quantNorm(ratings$Pain))
install.packages("moments")
library(moments)
skewness(ratings$Pain)
ratings$Pain
hist(ratings$Pain)
skewness(test$Value)
kurtosis(test$Value)
hist(test$Value)
qqPlot(test$Value)
View(test)
hist(erp$Value)
hist(ratings$Pain)
hist(sqrt(ratings$Pain))
hist(1/ratings$Pain)
hist(log10(ratings$Pain))
?transform()
install.packages("liver")
library(liver)
hist(transform(test$Value, method="zscore"))
hist(test$Value)
hist(ratings$Pain)
hist(ratings$Pain)
hist(transform(ratings$Pain, method="zscore"))
shapiro.test(transform(ratings$Pain, method="zscore")[1:5000, ])
transform(ratings$Pain, method = "zscore")
transform(ratings$Pain, method = "zscore")[1:5000,]
transform(ratings$Pain, method = "zscore")[1:5000, ]
head(transform(ratings$Pain, method = "zscore"), 5000)
shapiro.test(head(transform(ratings$Pain, method = "zscore"), 5000))
shapiro.test(head(ratings$Pain, 5000))
hist(test$Value)
tabel(ratings$Stim)
table(ratings$Stim)
install.packages("afex")
library(afex)
View(ratings)
pain.model <- aov_ez("Subject", "Pain", ratings, between = "Sex", within = c("Stim", "Condition"))
pain.model
print(xtable::xtable(anova(pain.model), digits = c(rep(2, 5), 3, 4)), type = "html")
?aov_ez
residuals(pain.model)
length(ratings$Sex)
length(ratings$Stim)
R <- residuals(pain.model)
length(R)
var(subset(ratings, ratings$Sex==male)$Pain)
var(subset(ratings, ratings$Sex==Male)$Pain)
View(ratings)
var(subset(ratings, ratings$Sex=="male")$Pain)
var(subset(na.omit(ratings), ratings$Sex=="male")$Pain)
?mauchley.test
?mauchly.test()
?emmeans
View(test)
table(erp$Condition)
baseline <- subset(erp, erp$Component=="Baseline_Amp")
temp <- subset(erp, erp$Component=="N1_Amp")
temp$Baseline <- baseline$Value
View(temp)
library(ggpubr)
library(car)
library(lme4)
library(multcomp)
library(tidyverse)
library(rstatix)
library(lmerTest)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
require(gridExtra)
library(ggsignif)
library(png)
library(reshape2)
library(afex)
options(width = 115)
erp1 <- read_csv("Perception_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp1$Condition <- "Perception"
erp2 <- read_csv("EDA_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp2$Condition <- "EDA"
erp3 <- read_csv("Motor_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp3$Condition <- "Motor"
erp4 <- read_csv("Control_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp4$Condition <- "Control"
erp <- do.call("rbind", list(erp1, erp2, erp3, erp4))
length(erp)
length(erp$Value)
erp <- erp[!duplicated(erp), ]  # remove duplicate rows
length(erp$Value)
View(erp)
difference <- function(df, title, ignore){
baseline <- subset(df, df$Component=="Baseline_Amp" & !(df$ID %in% ignore))
test <- subset(df, df$Component==title & !(df$ID %in% ignore))
# sub-sampling baseline so it equals test in length
baseline <- baseline[sample(nrow(baseline), length(test$Value)), ]
data <- rbind(baseline, test)
data <- na.omit(data)
# check that the difference is close enough to normal
d <- baseline$Value - test$Value
hist(d)
pairwise_t_test(data, Value ~ Component, paired = TRUE, p.adjust.method = "bonferroni")
}
difference(erp, "N1_Amp", ignore=c(10, 19))
?aov_ez
Amps <- subset(freq, freq$Component=="Gamma_Amp")$Value
freq1 <- read_csv("Perception_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq1$Condition <- "Perception"
freq2 <- read_csv("EDA_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq2$Condition <- "EDA"
freq3 <- read_csv("Motor_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq3$Condition <- "Motor"
freq4 <- read_csv("Control_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq4$Condition <- "Control"
freq <- do.call("rbind", list(freq1, freq2, freq3, freq4))
freq <- freq[!duplicated(freq), ]  # remove duplicate rows
freq <- subset(freq, freq$ID!=18)  # exclude subject 18 (DNF motor)
freq$Value <- abs(freq$Value)
Amps <- subset(freq, freq$Component=="Gamma_Amp")$Value
Baselines <- subset(freq, freq$Component=="Baseline_Amp")$Value
freq$Corrected <- Amps-Baselines
freq.corrected <- subset(freq, freq$Component!="Gamma_Lat")
freq.corrected <- subset(freq, freq$Component!="Gamma_Lat")
Amps <- subset(freq, freq$Component=="Gamma_Amp")$Value
Baselines <- subset(freq, freq$Component=="Baseline_Amp")$Value
freq.corrected$Corrected <- Amps-Baselines
freq.corrected <- subset(freq, !freq$Component %in% c("Gamma_Lat", "Baseline_Amp"))
Amps <- subset(freq, freq$Component=="Gamma_Amp")$Value
Baselines <- subset(freq, freq$Component=="Baseline_Amp")$Value
freq.corrected$Corrected <- Amps-Baselines
View(freq.corrected)
hist(freq.corrected$Corrected)
View(freq.corrected)
?afex_plot
boxplot(test$Value)$out
temp[!temp %in% boxplot(temp$Value)$out]
boxplot(temp$Value)$out
temp[!temp$Value %in% boxplot(temp$Value)$out]
temp[!(temp$Value %in% boxplot(temp$Value)$out),]
mean(subset(ratings, ratings$Sex=="male" && ratings$Stim=="low" && ratings$Condition=="Perception")$Pain)
subset(ratings, ratings$Sex=="male" && ratings$Stim=="low" && ratings$Condition=="Perception")$Pain
mean(subset(ratings, ratings$Sex==i & ratings$Stim==j & ratings$Condition==k)$Pain)
subset(ratings, ratings$Sex=="male" && ratings$Stim=="low" && ratings$Condition=="Perception")$Pain
subset(ratings, ratings$Sex=="male" & ratings$Stim=="low" & ratings$Condition=="Perception")$Pain
mean(subset(ratings, ratings$Sex=="male" & ratings$Stim=="low" & ratings$Condition=="Perception")$Pain)
?mean
sd(subset(ratings, ratings$Sex=="male" & ratings$Stim=="low" & ratings$Condition=="Perception")$Pain, na.rm = TRUE)
View(erp)
library(ggplot2)
ggboxplot
?leveneTest
?adjusted
library(ggpubr)
library(car)
library(multcomp)
library(tidyverse)
library(rstatix)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
library(afex)
erp1 <- read_csv("Data/Perception_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp1$Condition <- "Perception"
erp2 <- read_csv("Data/EDA_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp2$Condition <- "EDA"
erp3 <- read_csv("Data/Motor_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp3$Condition <- "Motor"
erp4 <- read_csv("Data/Control_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp4$Condition <- "Control"
erp <- do.call("rbind", list(erp1, erp2, erp3, erp4))
erp <- erp[!duplicated(erp), ]  # remove duplicate rows
erp <- subset(erp, erp$ID!=18)  # exclude subject 18 (DNF motor)
erp <- na.omit(erp)             # remove any NAs
erp$Value <- abs(erp$Value)     # make all amplitudes absolute values for easier comparison
View(erp)
subset(erp, erp$ID==2 && erp$Stimulus==1)
subset(erp, (erp$ID==2 && erp$Stimulus==1))
subset(erp, (erp$ID==2 & erp$Stimulus==1))
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition==Perception))
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception"))
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception"))$Value
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception"))$Value - 0.1275385
table(erp$ID)
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception"))
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception" & erp$Component=="Baseline_Amp"))
subset(erp, (erp$ID==2 & erp$Stimulus==1 & erp$Condition=="Perception" & erp$Component=="Baseline_Amp"))$Value
View(erp)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
View(new)
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in table(erp$ID)) {  # for each subject
for (stimulus in table(erp$Stimulus)) {  # for each stimulus level
for (condition in table(erp$Condition)) {  # for each condition
selection <- subset(erp, (erp$ID==subject & erp$Stimulus==stimulus & erp$Condition==condition))
baseline <- subset(selection, erp$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
View(selection)
condition
table(erp$Condition)
levels(erp$Condition)
unique(erp$Condition)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(erp$ID)) {  # for each subject
for (stimulus in unique(erp$Stimulus)) {  # for each stimulus level
for (condition in unique(erp$Condition)) {  # for each condition
selection <- subset(erp, (erp$ID==subject & erp$Stimulus==stimulus & erp$Condition==condition))
baseline <- subset(selection, erp$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
View(selection)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(erp$ID)) {  # for each subject
for (stimulus in unique(erp$Stimulus)) {  # for each stimulus level
for (condition in unique(erp$Condition)) {  # for each condition
selection <- subset(erp, (erp$ID==subject & erp$Stimulus==stimulus & erp$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
View(new)
new <- na.omit(new)
erp1 <- read_csv("Data/Perception_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp1$Condition <- "Perception"
erp2 <- read_csv("Data/EDA_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp2$Condition <- "EDA"
erp3 <- read_csv("Data/Motor_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp3$Condition <- "Motor"
erp4 <- read_csv("Data/Control_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp4$Condition <- "Control"
erp <- do.call("rbind", list(erp1, erp2, erp3, erp4))
erp <- erp[!duplicated(erp), ]  # remove duplicate rows
erp <- subset(erp, erp$ID!=18)  # exclude subject 18 (DNF motor)
erp <- na.omit(erp)             # remove any NAs
View(erp)
erp1 <- read_csv("Data/Perception_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp1$Condition <- "Perception"
erp2 <- read_csv("Data/EDA_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp2$Condition <- "EDA"
erp3 <- read_csv("Data/Motor_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp3$Condition <- "Motor"
erp4 <- read_csv("Data/Control_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp4$Condition <- "Control"
erp <- do.call("rbind", list(erp1, erp2, erp3, erp4))
erp <- erp[!duplicated(erp), ]  # remove duplicate rows
erp <- subset(erp, erp$ID!=18)  # exclude subject 18 (DNF motor)
erp <- na.omit(erp)             # remove any NAs
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(erp$ID)) {  # for each subject
for (stimulus in unique(erp$Stimulus)) {  # for each stimulus level
for (condition in unique(erp$Condition)) {  # for each condition
selection <- subset(erp, (erp$ID==subject & erp$Stimulus==stimulus & erp$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
new <- na.omit(new)
View(new)
View(erp)
gamma1 <- read_csv("Data/Perception_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma1$Condition <- "Perception"
gamma2 <- read_csv("Data/EDA_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma2$Condition <- "EDA"
gamma3 <- read_csv("Data/Motor_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma3$Condition <- "Motor"
gamma4 <- read_csv("Data/Control_freq_G.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
gamma4$Condition <- "Control"
gamma <- do.call("rbind", list(gamma1, gamma2, gamma3, gamma4))
gamma <- gamma[!duplicated(gamma), ]  # remove duplicate rows
gamma <- subset(gamma, gamma$ID!=18)  # exclude subject 18 (DNF motor)
# baseline correction, if desired
new <- data.frame(ID=NA,
Sex=NA,
Stimulus=NA,
Component=NA,
Value=NA,
Condition=NA)
for (subject in unique(gamma$ID)) {  # for each subject
for (stimulus in unique(gamma$Stimulus)) {  # for each stimulus level
for (condition in unique(gamma$Condition)) {  # for each condition
selection <- subset(gamma, (gamma$ID==subject & gamma$Stimulus==stimulus & gamma$Condition==condition))
baseline <- subset(selection, selection$Component=="Baseline_Amp")$Value  # grab baseline amplitude
selection$Value <- selection$Value - baseline  # subtract baseline from all values
# NOTE: this also subtracts baseline from itself AND the latency value!
new <- rbind(new, selection)
}
}
}
new <- na.omit(new)  # remove extra NA row at the top
View(new)
View(gamma)
library(ggpubr)
library(emmeans)
library(readr)
library(afex)
library(car)
library(multcomp)
R1 <- read_csv("Data/Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R1$Condition <- "Perception"
R2 <- read_csv("Data/Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2$Condition <- "Control"
ratings <- rbind(R1, R2)
ratings <- subset(ratings, ratings$Subject!=18)  # exclude subject 18 (DNF motor)
ratings <- ratings[!(ratings$Pain %in% boxplot(ratings$Pain)$out),]  # remove rows with outliers
View(ratings)
aov(Pain ~ Sex, data=ratings)
summary(aov(Pain ~ Sex, data=ratings))
summary(aov(Pain ~ Sex * Stimulus, data=ratings))
View(ratings)
summary(aov(Pain ~ Sex * Stim, data=ratings))
library(rstatix)
anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex)
get_anova_table(anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex))
library(afex)
pain.model <- aov_ez(id = "Subject",
dv = "Pain",
data = ratings,
between = "Sex",
within = "Stim",
fun_aggregate = mean)
knitr::kable(nice(pain.model))
pain.model <- aov_ez(id = "Subject",
dv = "Pain",
data = ratings,
between = "Sex",
fun_aggregate = mean)
knitr::kable(nice(pain.model))
View(ratings)
get_anova_table(anova_test(data = ratings, dv = Pain, wid = Subject, within = Sex))
R <- aggregate(Pain ~ Subject + Sex, data = ratings, mean)
View(R)
get_anova_table(anova_test(data = R, dv = Pain, wid = Subject, within = Sex))
summary(aov(Pain ~ Sex + Error(Subject/Sex), data=ratings))
ggboxplot(ratings, Sex, Pain)
ggboxplot(data = ratings, x = Sex, y = Pain)
View(ratings)
ggboxplot
?ggboxplot
ggboxplot(data = ratings, x = "Sex", y = "Pain")
