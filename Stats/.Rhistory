}
# N1 AMPLITUDE
model(erp, "N1_Amp")
model <- function(df, title) {
temp <- subset(df, df$Component==title)
erp.model <- lmer(Value ~ Sex * Stimulus + (1|ID), data = temp, REML = TRUE)
print(anova(erp.model))  # look for main effects/interactions
print(rand(erp.model))  # look at the significance of our random effect (subject)
post.hoc <- data.frame(pairs(emmeans(erp.model, ~ Sex * Stimulus), adjust = "tukey"))
post.hoc$Signif <- signif(post.hoc$p.value)
print(post.hoc)
# shape post.hoc so that we can plot it easier
height <- max(temp$Value)
columns <- c("Stimulus", "group1", "group2", "p", "y.position")
stats <- data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(stats) = columns
# check residuals
#R = residuals(erp.model)
#ggqqplot(R)
# plot results
ggboxplot(temp, x = "Sex", y = "Value",
color = "Stimulus", palette = c("#028090", "#C64191", "#157F1F"),
ylab = title, xlab = "Sex", facet.by = "Stimulus") +
stat_summary(fun=mean, colour="red", aes(group=1),
geom="line", lwd=1, lty=1) +
stat_summary(fun=mean, colour="black", aes(group=2),
geom="point", size=2)
}
# N1 AMPLITUDE
model(erp, "N1_Amp")
# N2 AMPLITUDE
model(erp, "N2_Amp")
# P2 AMPLITUDE
model(erp, "P2_Amp")
# Gamma AMPLITUDE
model(freq, "Gamma_Amp")
model <- function(df, title) {
temp <- subset(df, df$Component==title)
erp.model <- lmer(Value ~ Sex * Stimulus + (1|ID), data = temp, REML = TRUE)
print(anova(erp.model))  # look for main effects/interactions
print(rand(erp.model))  # look at the significance of our random effect (subject)
post.hoc <- data.frame(pairs(emmeans(erp.model, ~ Sex * Stimulus), adjust = "bonferroni"))
post.hoc$Signif <- signif(post.hoc$p.value)
print(post.hoc)
# shape post.hoc so that we can plot it easier
height <- max(temp$Value)
columns <- c("Stimulus", "group1", "group2", "p", "y.position")
stats <- data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(stats) = columns
# check residuals
#R = residuals(erp.model)
#ggqqplot(R)
# plot results
ggboxplot(temp, x = "Sex", y = "Value",
color = "Stimulus", palette = c("#028090", "#C64191", "#157F1F"),
ylab = title, xlab = "Sex", facet.by = "Stimulus") +
stat_summary(fun=mean, colour="red", aes(group=1),
geom="line", lwd=1, lty=1) +
stat_summary(fun=mean, colour="black", aes(group=1),
geom="point", size=2)
}
# N1 AMPLITUDE
model(erp, "N1_Amp")
# N2 AMPLITUDE
model(erp, "N2_Amp")
# P2 AMPLITUDE
model(erp, "P2_Amp")
# Gamma AMPLITUDE
model(freq, "Gamma_Amp")
# P2 AMPLITUDE
model(erp, "P2_Amp")
# N2 AMPLITUDE
model(erp, "N2_Amp")
simple_model <- function(df, title, ignore) {
temp <- subset(df, df$Component==title & !(df$ID %in% ignore))
temp <- temp[!duplicated(temp), ]  # remove any duplicated rows
erp.model <- anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
post.hoc <- pairwise_t_test(temp, Value ~ Stimulus, paired = TRUE, p.adjust.method = "bonferroni")
post.hoc <- add_xy_position(post.hoc, x = "Stimulus")
print(erp.model)
height <- max(temp$Value)
ggboxplot(temp, x = "Stimulus", y = "Value",
color = "Stimulus", palette = c("#00AFBB", "#E7B800", "#A03D41"),
ylab = title, xlab = "Stimulus") +
stat_summary(fun=mean, colour="black", aes(group=1),
geom="line", lwd=1, lty=1) +
stat_pvalue_manual(post.hoc, tip.length = 0, hide.ns = FALSE, y.position = c(height+1, height+2, height+3)) +
labs(
subtitle = get_test_label(erp.model, detailed = TRUE),
caption = get_pwc_label(post.hoc)
)
}
# Gamma_Amp as a factor of Stimulus intensity alone?
simple_model(freq, "Gamma_Amp", ignore=c())
#### Imports and Libraries ####
library(readxl)
library(ggpubr)
library(car)
library(lme4)
library(multcomp)
library(tidyverse)
library(rstatix)
library(lmerTest)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
require(gridExtra)
library(ggsignif)
threshold <- read_csv("Thresholds.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female"))))
# Visualize distributions
ggboxplot(threshold, x = "Sex", y = "Threshold",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Pain Threshold (mJ)", xlab = "Sex")
ggqqplot(threshold, "Threshold", facet.by = "Sex")
threshold <- subset(threshold, threshold$Subject != 33)  # remove single outlier
ggqqplot(threshold, "Threshold", facet.by = "Sex")
# Compute the analysis of variance
thresh.aov <- aov(Threshold ~ Sex, data = threshold)
# Levene's for homogeneity of variance (significant = non-homogeneous)
leveneTest(Threshold ~ Sex, data = threshold)
# Extract the residuals
aov_residuals <- residuals(object = thresh.aov)
# Run Shapiro-Wilk test to check for normality (significant = non-normal)
shapiro.test(x = aov_residuals)
# Summary of the analysis
summary(thresh.aov)
# Visualize distributions
ggboxplot(threshold, x = "Sex", y = "Threshold",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Pain Threshold (mJ)", xlab = "Sex")
library(readxl)
Brain_mediators_of_pain_demographic_data <- read_excel("C:/Users/zatraylo/PycharmProjects/Pain/Data/Pain Dataset/Brain mediators of pain_demographic data.xlsx")
View(Brain_mediators_of_pain_demographic_data)
R1 <- read_csv("Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2 <- read_csv("Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
ratings <- rbind(R1, R2)
View(ratings)
# omit NAs, where participant did not report within time limit
ratings <- na.omit(ratings)
# visualize the data
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex")
View(ratings)
View(R2)
View(R1)
R1 <- read_csv("Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2 <- read_csv("Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
ratings <- rbind(R1, R2)
# omit NAs, where participant did not report within time limit
ratings <- na.omit(ratings)
# visualize the data
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex")
ggboxplot(ratings, x = "Stim", y = "Pain",
color = "Stim", palette = c("#00AFBB", "#E7B800", "#A03D41"),
ylab = "Verbal Pain Rating", xlab = "Stimulus Level",
order = c("low", "med", "high")) +
geom_signif(comparisons = list(c("low", "med")),
map_signif_level=TRUE,
y_position = 100) +
geom_signif(comparisons = list(c("low", "high")),
map_signif_level=TRUE,
y_position = 110) +
geom_signif(comparisons = list(c("high", "med")),
map_signif_level=TRUE,
y_position = 105)
# model Pain Ratings as a factor of Sex, controlling for Stim level and with
# Subject as a random effect (since we have subject-specific pain thresholds)
pain.model <- lmer(Pain ~ Sex * Stim + (1|Subject), data = ratings, REML = TRUE)
anova(pain.model)
rand(pain.model)
post.hoc <- emmeans(pain.model, ~ Sex * Stim)
post.hoc <- emmeans(pain.model, ~ Sex * Stim, lmerTest.limit = 6056)
post.hoc <- emmeans(pain.model, ~ Sex * Stim, lmerTest.limit = 6057)
set emm_options(pbkrtest.limit = 6056)
emm_options(pbkrtest.limit = 6056)
post.hoc <- emmeans(pain.model, ~ Sex * Stim)
pairs(post.hoc, adjust = "tukey")
# Check the residuals for normality
R = residuals(pain.model)
qqnorm(R)
qqline(R)
ggqqplot(R)
# Run Shapiro-Wilk test to check for normality (significant = non-normal)
shapiro.test(R)
ratins[sample(nrow(ratings), 5000), ]
ratings[sample(nrow(ratings), 5000), ]
ratings <- ratings[sample(nrow(ratings), 5000), ]  # downsample, as we have too many ratings (>6000)
# omit NAs, where participant did not report within time limit
ratings <- na.omit(ratings)
# visualize the data
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex")
ggboxplot(ratings, x = "Stim", y = "Pain",
color = "Stim", palette = c("#00AFBB", "#E7B800", "#A03D41"),
ylab = "Verbal Pain Rating", xlab = "Stimulus Level",
order = c("low", "med", "high")) +
geom_signif(comparisons = list(c("low", "med")),
map_signif_level=TRUE,
y_position = 100) +
geom_signif(comparisons = list(c("low", "high")),
map_signif_level=TRUE,
y_position = 110) +
geom_signif(comparisons = list(c("high", "med")),
map_signif_level=TRUE,
y_position = 105)
# model Pain Ratings as a factor of Sex, controlling for Stim level and with
# Subject as a random effect (since we have subject-specific pain thresholds)
pain.model <- lmer(Pain ~ Sex * Stim + (1|Subject), data = ratings, REML = TRUE)
anova(pain.model)
rand(pain.model)
emm_options(pbkrtest.limit = 6056)
post.hoc <- emmeans(pain.model, ~ Sex * Stim)
pairs(post.hoc, adjust = "tukey")
# Check the residuals for normality
R = residuals(pain.model)
ggqqplot(R)
# Run Shapiro-Wilk test to check for normality (significant = non-normal)
shapiro.test(R)  # fails, sample size too big!
hist(ratings$Pain)
hist(sqrt(ratings$Pain)
)
hist(sqrt(max(ratings$Pain+1) - ratings$Pain))
hist(log10(max(ratings$Pain+1) - ratings$Pain))
ratings$Pain <- sqrt(ratings$Pain)
# visualize the data
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex")
ggboxplot(ratings, x = "Stim", y = "Pain",
color = "Stim", palette = c("#00AFBB", "#E7B800", "#A03D41"),
ylab = "Verbal Pain Rating", xlab = "Stimulus Level",
order = c("low", "med", "high")) +
geom_signif(comparisons = list(c("low", "med")),
map_signif_level=TRUE,
y_position = 100) +
geom_signif(comparisons = list(c("low", "high")),
map_signif_level=TRUE,
y_position = 110) +
geom_signif(comparisons = list(c("high", "med")),
map_signif_level=TRUE,
y_position = 105)
# model Pain Ratings as a factor of Sex, controlling for Stim level and with
# Subject as a random effect (since we have subject-specific pain thresholds)
pain.model <- lmer(Pain ~ Sex * Stim + (1|Subject), data = ratings, REML = TRUE)
anova(pain.model)
rand(pain.model)
emm_options(pbkrtest.limit = 5000)
post.hoc <- emmeans(pain.model, ~ Sex * Stim)
pairs(post.hoc, adjust = "tukey")
# Check the residuals for normality
R = residuals(pain.model)
ggqqplot(R)
# Run Shapiro-Wilk test to check for normality (significant = non-normal)
shapiro.test(R)
hist(ratings$Pain))
hist(ratings$Pain)
# Levene's for homogeneity of variance (significant = non-homogeneous)
leveneTest(Threshold ~ Sex, data = threshold)
# Levene's test for homogeneity of variance
leveneTest(R ~ ratings$Sex * ratings$Stim)
table(ratings$Stim)
table(ratings$Sex)
table(ratings$Subject)
ggscatter(
ratings, x = "Stim", y = "Pain",
facet.by  = c("male", "female"),
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
ratings, x = "Stim", y = "Pain",
facet.by  = "Sex",
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ratings <- rbind(R1, R2)
ggscatter(
ratings, x = "Stim", y = "Pain",
facet.by  = "Sex",
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
ratings, x = "Stim", y = "Pain",
short.panel.labs = FALSE
)+
stat_smooth(method = "loess", span = 0.9)
ggscatter(
ratings, x = "Stim", y = "Pain",
color = "Sex", add = "reg.line"
)+
stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = group)
)
ggscatter(
ratings, x = "Stim", y = "Pain",
color = "Sex", add = "reg.line"
)+
stat_regline_equation(
aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = Sex)
)
Anova(aov(Pain ~ Sex * Stim, data = ratings), type = 3)
# NOTE: both of these tests are significant, but our sample size is big (Shapiro)
# and there isn't a group imbalance (Levene), so this should be okay
# Assumptions of homogeneity of regression slopes (should have no significant interaction)
Anova(aov(Pain ~ Sex * Stim, data = ratings), type = 3)
# Assumption of linearity (relationship between Pain and Stim at each Sex should be linear)
ggplot(ratings, aes(Stim, Pain, colour = Sex)) + geom_point(size = 3) +
geom_smooth(method = "lm", aes(fill = Sex), alpha = 0.1) + theme(legend.position="top")
levels(ratings$Stim)
as.numeric(ratings$Stim)
# Assumption of linearity (relationship between Pain and Stim at each Sex should be linear)
ggplot(ratings, aes(Stim_Num, Pain, colour = Sex)) + geom_point(size = 3) +
geom_smooth(method = "lm", aes(fill = Sex), alpha = 0.1) + theme(legend.position="top")
ratings$Stim_Num <- as.numeric(ratings$Stim)  # useful for later
# Assumption of linearity (relationship between Pain and Stim at each Sex should be linear)
ggplot(ratings, aes(Stim_Num, Pain, colour = Sex)) + geom_point(size = 3) +
geom_smooth(method = "lm", aes(fill = Sex), alpha = 0.1) + theme(legend.position="top")
# a visualization of this significance when random effects are ignored
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex",
facet.by = "Stim") +
geom_point(color = "grey") +
stat_summary(fun = mean, shape = 18)
?ggqqplot
library(ggpubr)
library(car)
library(lme4)
library(multcomp)
library(tidyverse)
library(rstatix)
library(lmerTest)
library(rcompanion)
library(emmeans)
library(readr)
library(ggplot2)
require(gridExtra)
library(ggsignif)
options(warn=-1)  # hide warnings, for clean presentation
threshold <- read_csv("Thresholds.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female"))))
thresh.aov <- aov(Threshold ~ Sex, data = threshold)
summary(thresh.aov)
thresh.aov$coefficients
thresh.aov$effects
thresh.aov$terms
threshold <- subset(threshold, threshold$Subject != 33)
thresh.aov <- aov(Threshold ~ Sex, data = threshold)
summary(thresh.aov)
ggboxplot(ratings, x = "Sex", y = "Pain",
color = "Sex", palette = c("#00AFBB", "#E7B800"),
ylab = "Verbal Pain Rating", xlab = "Sex") +
geom_signif(comparisons = list(c("male", "female")),
map_signif_level=TRUE, y_position = 100)
?geom_signif
pain.model <- lmer(Pain ~ Sex * Stim + (1|Subject), data = ratings, REML = TRUE)
R1 <- read_csv("Perception_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
R2 <- read_csv("Control_ratings.csv", col_types = cols(Sex = col_factor(
levels = c("male", "female")),
Stim = col_factor(
levels = c("low", "med", "high"))))
ratings <- rbind(R1, R2)
ratings <- na.omit(ratings)
ratings$Stim_Num <- as.numeric(ratings$Stim)
ratings <- ratings[sample(nrow(ratings), 5000), ]
pain.model <- lmer(Pain ~ Sex * Stim + (1|Subject), data = ratings, REML = TRUE)
anova(pain.model)
erp1 <- read_csv("Perception_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp2 <- read_csv("EDA_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp3 <- read_csv("Motor_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp4 <- read_csv("Control_erp.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
erp <- do.call("rbind", list(erp1, erp2, erp3, erp4))
View(erp)
ggboxplot(subset(erp, grepl("Amp", erp$Component, fixed = TRUE)),
x="Component", y="Value",
color = "Component", palette = c("#00AFBB", "#E7B800", "#A03D41", "#C130A2"),
ylab = "Amplitude", xlab = "Component",
order = c("Baseline_Amp", "N1_Amp", "N2_Amp", "P2_Amp"))
erp <- na.omit(erp)
erp$Value <- abs(erp$Value)
ggboxplot(subset(erp, grepl("Amp", erp$Component, fixed = TRUE)),
x="Component", y="Value",
color = "Component", palette = c("#00AFBB", "#E7B800", "#A03D41", "#C130A2"),
ylab = "Amplitude", xlab = "Component",
order = c("Baseline_Amp", "N1_Amp", "N2_Amp", "P2_Amp"))
View(erp)
ignore = c(10, 19)
erp$ID %in% ignore
subset(erp, derp$Component=="Baseline_Amp" & !(erp$ID %in% ignore))
subset(erp, erp$Component=="Baseline_Amp" & !(erp$ID %in% ignore))
subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
rbind(subset(erp, erp$Component=="Baseline_Amp" & !(erp$ID %in% ignore)), subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore)))
d <- subset(erp, erp$Component=="Baseline_Amp" & !(erp$ID %in% ignore))$Value - subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))$Value
subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
length(subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore)))
length(subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))$Value)
freq1 <- read_csv("Percepion_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq1 <- read_csv("Perception_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq2 <- read_csv("EDA_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq3 <- read_csv("Motor_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq4 <- read_csv("Control_freq.csv", col_types = cols(...1 = col_skip(),
Sex = col_factor(levels = c("male", "female")),
Stimulus = col_factor(levels = c("1", "2", "3"))))
freq <- do.call("rbind", list(freq1, freq2, freq3, freq4))
freq$Value <- abs(freq$Value)
View(freq)
subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))[!duplicated(subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore)))]
temp <- subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
temp[!duplicated(temp), ]
temp <- temp[!duplicated(temp), ]
erp.model <- anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
table(temp$ID)
temp <- subset(erp, erp$Component=="N2_Amp")
table(temp$ID)
temp <- subset(erp, erp$Component=="P2_Amp")
table(temp$ID)
temp <- subset(erp, erp$Component=="Gamma_Amp")
table(temp$ID)
temp <- subset(freq, freq$Component=="Gamma_Amp")
table(temp$ID)
temp <- temp[!duplicated(temp), ]
table(temp$ID)
a <- c(11 12 12 11  6 12 10  7 12 12 12 12 11 12  5 12 11  9 12 12 12 12  9 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 11 12 12 11 12 11 12 12 12  9 12 11)
a <- c(11, 12, 12, 11,  6, 12, 10,  7, 12, 12, 12, 12, 11, 12,  5, 12, 11,  9, 12, 12, 12, 12,  9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 11, 12, 11, 12, 12, 12,  9, 12, 11)
a<12
temp <- subset(erp, erp$Component=="N1_Amp")
temp
temp <- temp[!duplicated(temp), ]
anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
View(temp)
temp <- subset(temp, select = -Component)
anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
anova_test(data = temp, dv = Value, wid = ID, within = Sex)
temp <- subset(temp, select = -Sex)
anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
table(temp$ID)
table(temp$Simulus)
table(temp$Stimulus)
ignore=c(1, 18, 32, 33, 45, 48)
temp <- subset(erp, erp$Component=="N1_Amp" & !(df$ID %in% ignore))
ignore=c(1, 18, 32, 33, 45, 48)
temp <- subset(erp, erp$Component=="N1_Amp" & !(df$ID %in% ignore))
temp <- subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
table(temp#ID)
d
table(temp$ID)
ignore=c(1, 10, 18, 32, 33, 45, 48)
temp <- subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
table(temp$ID)
ignore=c(1, 10, 18, 19, 32, 33, 45, 48)
temp <- subset(erp, erp$Component=="N1_Amp" & !(erp$ID %in% ignore))
table(temp$ID)
anova_test(data = temp, dv = Value, wid = ID, within = Stimulus)
anova_test(data = temp, dv = Value, wid = ID)
anova_test(data = temp, dv = Value, within = Stimulus)
anova_test(data = temp, dv = Value, between = Stimulus)
aov(Value ~ Stimulus + Error(ID), data = temp)
summary(aov(Value ~ Stimulus + Error(ID), data = temp))
TukeyHSD(aov(Value ~ Stimulus + Error(ID), data = temp))
tukey_hsd(aov(Value ~ Stimulus + Error(ID), data = temp))
res <- aov(Value ~ Stimulus + Error(ID), data = temp))
res <- aov(Value ~ Stimulus + Error(ID), data = temp)
post_test <- glht(res,
linfct = mcp(species = "Tukey")
)
library(multcomp)
post_test <- glht(res,linfct = mcp(species = "Tukey"))
View(erp)
View(erp)
View(erp)
?stat_compare_means
pwp?p
?pwpp
